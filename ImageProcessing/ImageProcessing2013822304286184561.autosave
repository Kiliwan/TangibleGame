
import processing.video.*;

Capture cam;


PImage img;
PImage pipelined;

BlobDetection blob;

boolean keepOnlyBiggest = true;

/*
HScrollbar minH;
HScrollbar maxH;
HScrollbar minS;
HScrollbar maxS;
HScrollbar minB;
HScrollbar maxB;
HScrollbar threshold;
HScrollbar accMinVotes;

int MAX_VOTES = 500;

//scrollbar parameters
int sh = 20;
color scrollbarColor = color(104);
color scrollbarCursorColor_active = color(0);
color scrollbarCursorColor_inactive = color (104);
*/

void settings() {
  size(640,480);
}

void setup() {
  
  blob = new BlobDetection();
  
  /*
  minH = new HScrollbar(0,      sh*0,width/2,sh);
  maxH = new HScrollbar(width/2,sh*0,width/2,sh);
  minS = new HScrollbar(0,      sh*1,width/2,sh);
  maxS = new HScrollbar(width/2,sh*1,width/2,sh);
  minB = new HScrollbar(0,      sh*2,width/2,sh);
  maxB = new HScrollbar(width/2,sh*2,width/2,sh);
  threshold = new HScrollbar(0,  sh*3,width,sh);
  accMinVotes = new HScrollbar(0,sh*4,width,sh);
  */

  String[] cameras= Capture.list();

  if(cameras.length== 0) {
    println("There are no cameras available for capture.");
    exit();
  }else{
    println("Available cameras: "+cameras.length);
    for(int i = 0; i < cameras.length; i++) {
      println(cameras[i]);
    }
    
    cam = new Capture(this, 640, 480, cameras[0]);
    
    cam.start();
  }
  
  //img = loadImage("board1.jpg");
}

void draw() {
  
  clear();
  

  if(cam.available() == true) {
    cam.read();
  }
  img= cam.get();
  
  img = thresholdHSB(img,0,40,80,200,60,200);
  img = convolute(img);
  img = blob.findConnectedComponents(img, keepOnlyBiggest);
  img = scharr(img);
  img = threshold(img,200);
  
  image(img,0,0);
  
  plot_lines(hough(img, 80),img);

  /*
  pipelined = thresholdHSB(img,100,200,100,255,45,100);
  pipelined = convolute(pipelined);
  pipelined = blob.findConnectedComponents(pipelined, keepOnlyBiggest);
  pipelined = scharr(pipelined);
  pipelined = threshold(pipelined,50);
  
  image(pipelined,0,0);
  
  plot_lines(hough(pipelined, 250),pipelined);
  */
  
  /*
  minH.display(scrollbarColor, scrollbarCursorColor_active, scrollbarCursorColor_inactive);
  minH.update();
  
  maxH.display(scrollbarColor, scrollbarCursorColor_active, scrollbarCursorColor_inactive);
  maxH.update();
  
  minS.display(scrollbarColor, scrollbarCursorColor_active, scrollbarCursorColor_inactive);
  minS.update();
  
  maxS.display(scrollbarColor, scrollbarCursorColor_active, scrollbarCursorColor_inactive);
  maxS.update();
  
  minB.display(scrollbarColor, scrollbarCursorColor_active, scrollbarCursorColor_inactive);
  minB.update();
  
  maxB.display(scrollbarColor, scrollbarCursorColor_active, scrollbarCursorColor_inactive);
  maxB.update();
  
  threshold.display(scrollbarColor, scrollbarCursorColor_active, scrollbarCursorColor_inactive);
  threshold.update();
  
  accMinVotes.display(scrollbarColor, scrollbarCursorColor_active, scrollbarCursorColor_inactive);
  accMinVotes.update();
  */
}

//global threshold
PImage threshold(PImage img,int threshold){
  PImage result = createImage(img.width, img.height, RGB);
  for(int i = 0; i < img.width* img.height; i++){
    if(brightness(img.pixels[i]) < threshold){
      result.pixels[i] = color(255);
    }else{
      result.pixels[i] = color(0);
    }
  }
  return result;
}

//color thresholding
PImage HSBv1(PImage img, int min, int max) {
  PImage result = createImage(img.width, img.height, RGB);
  for(int i = 0; i < img.width * img.height; ++i){
    //result.pixels[i]=color(hue(img.pixels[i])); // To get hue map
    float hue = hue(img.pixels[i]);
    if(hue>=min && hue<=max){
      result.pixels[i] = img.pixels[i];
    }
  }
  return result;
}

//3-channel thresholding
PImage thresholdHSB(PImage img, float minH, float maxH, float minS, float maxS, float minB, float maxB){
  PImage result = createImage(img.width, img.height, RGB);
  for(int i = 0; i < img.width * img.height; ++i){
    color p = img.pixels[i];
    float sat = saturation(p);
    float hue = hue(p);
    float br = brightness(p);
    if(sat < minS || sat > maxS || hue < minH || hue > maxH || br < minB || br > maxB){
      result.pixels[i] = color(0);
    } else {
      result.pixels[i] = color(255);
    }
  }
  return result;
}

PImage convolute(PImage img) {
  float[][]kernel= {{ 9, 12, 9 },
                    { 12, 15, 15 },
                    { 9, 12, 9 }};
  float normFactor= 99.f;
  
  // create a greyscale image (type: ALPHA) for output
  PImage result = createImage(img.width, img.height, ALPHA);

  // kernel size N = 3
  //// for each (x,y) pixel in the image:
  //    - multiply intensities for pixels in the range
  //      (x - N/2, y - N/2) to (x + N/2, y + N/2) by the
  //      corresponding weights in the kernel matrix
  //    - sum all these intensities and divide it by normFactor
  //    - set result.pixels[y * img.width + x] to this value
  int N = kernel.length;
  for(int i = 1; i < img.height -1; ++i){
    for(int j = 1; j < img.width -1; ++j){
      float brightness = 0;
      for(int k = -N/2; k < N/2 + 1; ++k){
        for(int l = -N/2; l < N/2 + 1; ++l){
          brightness+=brightness(img.pixels[(i+k)*img.width + (j+l)]) * kernel[k+N/2][l+N/2];
        }
      }
      brightness /= normFactor;
      result.pixels[i*img.width + j] = color(brightness); 
    }
  }
  return result;
}

PImage scharr(PImage img) {
    
  float[][] vKernel= {
               {  3, 0, -3  },
               { 10, 0, -10 },
               {  3, 0, -3  } };
  float[][] hKernel= {
               {  3, 10, 3 },
               {  0, 0, 0 },
               { -3, -10, -3 } };
               
  PImage result= createImage(img.width, img.height, ALPHA);
  
  // clear the image
  for(int i = 0; i < img.width* img.height; i++){
    result.pixels[i] = color(0);
  }
  
  float max = 0;
  float[] buffer = new float[img.width* img.height];
  
  float normFactor = 1.0;
  
  int N = 0;
  if(vKernel.length == hKernel.length){
    N = vKernel.length;
  }
  
  for(int i = 1; i < img.height -1; ++i){
    for(int j = 1; j < img.width -1; ++j){
      float sum_h = 0;
      float sum_v = 0;
      for(int k = -N/2; k < N/2 + 1; ++k){
        for(int l = -N/2; l < N/2 + 1; ++l){
          sum_h+=brightness(img.pixels[(i+k)*img.width + (j+l)]) * vKernel[k+N/2][l+N/2];
          sum_v+=brightness(img.pixels[(i+k)*img.width + (j+l)]) * hKernel[k+N/2][l+N/2];
        }
      }
      sum_h /= normFactor;
      sum_v /= normFactor;
      float sum = sqrt(pow(sum_h, 2) + pow(sum_v, 2));
      buffer[i*img.width + j] = sum;
      if(sum>max){ max = sum; }
    }
  }
  
  for(int y = 1; y < img.height- 1; y++){// Skip top and bottom edges
    for(int x = 1; x < img.width- 1; x++) {// Skip left and right
      int val=(int) ((buffer[y * img.width+ x] / max)*255);
      result.pixels[y * img.width+ x]=color(val);
    }
  }
  return result;
}

//line detection
List<PVector> hough(PImage edgeImg, int minVotes) {
  float discretizationStepsPhi = 0.06f; 
  float discretizationStepsR = 2.5f; 
  
  // dimensions of the accumulator
  int phiDim = (int) (Math.PI / discretizationStepsPhi +1);
  
  // max radius is the image diagonal, but it can be also negative 
  int rDim = (int) ((sqrt(edgeImg.width*edgeImg.width + edgeImg.height*edgeImg.height) * 2) / discretizationStepsR +1);
  
  // our accumulator
  int[] accumulator = new int[phiDim * rDim];
  
  // Fill the accumulator: on edge points (ie, white pixels of the edge 
  // image), store all possible (r, phi) pairs describing lines going 
  // through the point.
  int r_index = 0;
  float r_calc = 0;
  for (int y = 0; y < edgeImg.height; y++) {
    for (int x = 0; x < edgeImg.width; x++) {
    // Are we on an edge?
      if (brightness(edgeImg.pixels[y * edgeImg.width + x]) == 0) {
            // ...determine here all the lines (r, phi) passing through
            // pixel (x,y), convert (r,phi) to coordinates in the
            // accumulator, and increment accordingly the accumulator.
            // Be careful: r may be negative, so you may want to center onto
            // the accumulator: r += rDim / 2
            for(int phi = 0; phi < phiDim; phi++){
               r_calc = ((x * cos(phi*discretizationStepsPhi) + y * sin(phi * discretizationStepsPhi))/discretizationStepsR);
               r_calc += rDim/2;
               r_index = (int) r_calc;
               accumulator[phi * rDim + r_index] += 1; 
            }
      } 
    }
  }
  ArrayList<PVector> lines=new ArrayList<PVector>(); 
  for (int idx = 0; idx < accumulator.length; idx++) { 
    if (accumulator[idx] > minVotes) {
      // first, compute back the (r, phi) polar coordinates:
      int accPhi = (int) (idx / (rDim));
      int accR = idx - (accPhi) * (rDim);
      float r = (accR - (rDim) * 0.5f) * discretizationStepsR; 
      float phi = accPhi * discretizationStepsPhi; 
      lines.add(new PVector(r,phi));
    }
  }
  
  return lines;
}

void plot_lines(List<PVector> lines, PImage edgeImg){
  for (int idx = 0; idx < lines.size(); idx++) { 
    PVector line=lines.get(idx);
    float r = line.x; float phi = line.y;
         // Cartesian equation of a line: y = ax + b
         // in polar, y = (-cos(phi)/sin(phi))x + (r/sin(phi))
         // => y = 0 : x = r / cos(phi)
         // => x = 0 : y = r / sin(phi)
      // compute the intersection of this line with the 4 borders of // the image
      int x0 = 0;
      int y0 = (int) (r / sin(phi));
      int x1 = (int) (r / cos(phi));
      int y1 = 0;
      int x2 = edgeImg.width;
      int y2 = (int) (-cos(phi) / sin(phi) * x2 + r / sin(phi)); int y3 = edgeImg.width;
      int x3 = (int) (-(y3 - r / sin(phi)) * (sin(phi) / cos(phi)));
         // Finally, plot the lines
      stroke(204,102,0); 
      if (y0 > 0) {
        if (x1 > 0)
          line(x0, y0, x1, y1);
        else if (y2 > 0)
          line(x0, y0, x2, y2);
        else
           line(x0, y0, x3, y3);
       }else {
        if (x1 > 0) {
          if (y2 > 0)
            line(x1, y1, x2, y2); 
          else
            line(x1, y1, x3, y3);
           }else
             line(x2, y2, x3, y3);
         }
    }

}
